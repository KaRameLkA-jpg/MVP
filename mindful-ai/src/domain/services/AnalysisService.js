import { AssistantFactory } from './AssistantFactory.js'

export class AnalysisService {
  constructor(claudeProvider, chatRepository, analysisRepository, strategies, gamificationService) {
    this.claudeProvider = claudeProvider
    this.chatRepository = chatRepository
    this.analysisRepository = analysisRepository
    this.strategies = strategies
    this.gamificationService = gamificationService
  }

  async analyzeSession(sessionId) {
    console.log('üîç [AnalysisService] –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å–µ—Å—Å–∏–∏:', sessionId)
    
    const session = await this.chatRepository.findByIdWithMessages(sessionId)
    console.log('üìÑ [AnalysisService] –°–µ—Å—Å–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', {
      id: session.id,
      assistantType: session.assistantType,
      messagesCount: session.messages?.length || 0
    })
    
    const assistant = AssistantFactory.create(session.assistantType)
    console.log('ü§ñ [AnalysisService] –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω:', {
      id: assistant.id,
      analysisStyle: assistant.analysisStyle
    })
    
    // –í—ã–±—Ä–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∞–Ω–∞–ª–∏–∑–∞ –ø–æ —Ç–∏–ø—É –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    const strategy = this.strategies[assistant.analysisStyle]
    console.log('üéØ [AnalysisService] –°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤—ã–±—Ä–∞–Ω–∞:', {
      analysisStyle: assistant.analysisStyle,
      strategyFound: !!strategy,
      availableStrategies: Object.keys(this.strategies)
    })
    
    if (!strategy) {
      throw new Error(`–°—Ç—Ä–∞—Ç–µ–≥–∏—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Ç–∏–ø–∞: ${assistant.analysisStyle}`)
    }
    
    const prompt = strategy.buildPrompt(session.messages, assistant.prompt)
    console.log('üìù [AnalysisService] –ü—Ä–æ–º–ø—Ç —Å–æ–∑–¥–∞–Ω:', {
      promptLength: prompt.length,
      promptPreview: prompt.substring(0, 200) + '...'
    })
    
    const analysis = await this.claudeProvider.analyzeDialogue(prompt, session.messages, {
      assistantType: session.assistantType
    })
    console.log('üß† [AnalysisService] –ê–Ω–∞–ª–∏–∑ Claude –ø–æ–ª—É—á–µ–Ω:', {
      hasContent: !!analysis,
      insights: analysis.insights?.length || 0,
      emotions: analysis.emotions?.length || 0,
      patterns: analysis.patterns?.length || 0,
      recommendations: analysis.recommendations?.length || 0
    })
    
    const insights = strategy.extractInsights(analysis)
    console.log('üí° [AnalysisService] –ò–Ω—Å–∞–π—Ç—ã –∏–∑–≤–ª–µ—á–µ–Ω—ã:', {
      insightsType: typeof insights,
      insightsKeys: Object.keys(insights),
      hasStrategy: 'strategy' in insights
    })
    
    return await this.saveAnalysis(sessionId, analysis, insights)
  }

  async saveAnalysis(sessionId, rawAnalysis, processedInsights) {
    const analysisData = {
      sessionId,
      strategy: processedInsights.strategy || 'unknown',
      insights: processedInsights.insights || rawAnalysis.insights || [],
      emotions: rawAnalysis.emotions || [],
      patterns: rawAnalysis.patterns || [],
      recommendations: rawAnalysis.recommendations || [],
      metadata: rawAnalysis.metadata || {},
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –ë–î —á–µ—Ä–µ–∑ repository
    const savedAnalysis = await this.analysisRepository.create(analysisData)
    
    // –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ –∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è)
    if (this.gamificationService) {
      try {
        const session = await this.chatRepository.findById(sessionId)
        const userId = session?.userId || 'default-user'
        
        await this.gamificationService.awardPoints(userId, 'analysis_complete', {
          sessionId,
          analysisId: savedAnalysis.id,
          strategy: analysisData.strategy,
          insightsCount: analysisData.insights.length
        })
        
        console.log(`üéÆ [AnalysisService] –ù–∞—á–∏—Å–ª–µ–Ω—ã –æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId} –∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑`)
      } catch (error) {
        console.error('üéÆ [AnalysisService] –û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ—á–∫–æ–≤ –∑–∞ –∞–Ω–∞–ª–∏–∑:', error)
        // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏
      }
    }
    
    return savedAnalysis
  }
}