export class ActionOrientedStrategy {
  buildPrompt(messages, assistantPrompt) {
    return `
      –ö–æ–Ω—Ç–µ–∫—Å—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: ${assistantPrompt}
      
      –î–∏–∞–ª–æ–≥: ${messages.map(m => `${m.role}: ${m.content}`).join('\n')}
      
      –°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–∞ —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞:
      1. –ö–ª—é—á–µ–≤—ã–µ –≤—ã–∑–æ–≤—ã –∏ –ø—Ä–æ–±–ª–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      2. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ä–µ—à–µ–Ω–∏—è
      3. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
      
      –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –≤ JSON:
      {
        "strategy": "action-oriented",
        "insights": ["–∫–ª—é—á–µ–≤–∞—è –ø—Ä–æ–±–ª–µ–º–∞ 1", "–≤—ã–∑–æ–≤ 2", "–ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ 3"],
        "emotions": ["–±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ –ø–æ –ø–æ–≤–æ–¥—É –¥–µ–π—Å—Ç–≤–∏–π", "–º–æ—Ç–∏–≤–∞—Ü–∏—è –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º"],
        "patterns": ["–æ—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π", "–ø–æ–∏—Å–∫ –±—ã—Å—Ç—Ä—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"],
        "recommendations": ["–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ 1", "—Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ 2", "–ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π 3"]
      }
    `
  }

  extractInsights(analysis) {
    console.log('üéØ [ActionOrientedStrategy] –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Å–∞–π—Ç—ã:', {
      analysisType: typeof analysis,
      hasStrategy: 'strategy' in analysis,
      hasInsights: 'insights' in analysis
    })

    try {
      // analysis —É–∂–µ –æ–±—ä–µ–∫—Ç, –Ω–µ –Ω—É–∂–Ω–æ –ø–∞—Ä—Å–∏—Ç—å JSON
      const result = {
        strategy: 'action-oriented',
        insights: analysis.insights || analysis.keyInsights || [],
        emotions: analysis.emotions || [],
        patterns: analysis.patterns || [],
        recommendations: analysis.recommendations || analysis.actionItems || analysis.nextSteps || []
      }

      console.log('‚úÖ [ActionOrientedStrategy] –ò–Ω—Å–∞–π—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã:', {
        strategy: result.strategy,
        insights: result.insights.length,
        emotions: result.emotions.length,
        patterns: result.patterns.length,
        recommendations: result.recommendations.length
      })

      return result
    } catch (error) {
      console.warn('‚ö†Ô∏è [ActionOrientedStrategy] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fallback:', error.message)
      return {
        strategy: 'action-oriented',
        insights: ['–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'],
        emotions: [],
        patterns: [],
        recommendations: []
      }
    }
  }
}