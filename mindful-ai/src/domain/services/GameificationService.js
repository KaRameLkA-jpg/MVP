export class GameificationService {
  constructor(userRepository, achievementRepository, eventBus) {
    this.userRepository = userRepository
    this.achievementRepository = achievementRepository
    this.eventBus = eventBus
    
    // –¢–æ—á–∫–∏ –∑–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    this.POINTS = {
      MESSAGE: 10,          // –ó–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
      ANALYSIS_COMPLETE: 50, // –ó–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
      INSIGHT_SAVED: 25     // –ó–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Å–∞–π—Ç–∞
    }
  }

  // === –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ –ù–ê–ß–ò–°–õ–ï–ù–ò–Ø –û–ß–ö–û–í ===

  async awardPoints(userId, action, metadata = {}) {
    try {
      console.log(`üéÆ [GameificationService] –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId} –∑–∞ –¥–µ–π—Å—Ç–≤–∏–µ: ${action}`)
      
      let points = 0
      switch (action) {
        case 'message':
          points = this.POINTS.MESSAGE
          break
        case 'analysis_complete':
          points = this.POINTS.ANALYSIS_COMPLETE
          break
        case 'insight_saved':
          points = this.POINTS.INSIGHT_SAVED
          break
        default:
          console.warn(`üéÆ [GameificationService] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${action}`)
          return null
      }

      // –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
      const result = await this.userRepository.addExperience(userId, points)
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—á–∫–æ–≤
      this.eventBus.emit('gamification:points_earned', {
        userId,
        action,
        points,
        totalPoints: result.user.totalPoints,
        experience: result.user.experience,
        level: result.user.level,
        leveledUp: result.leveledUp,
        metadata
      })

      // –ï—Å–ª–∏ –ø–æ–≤—ã—Å–∏–ª—Å—è —É—Ä–æ–≤–µ–Ω—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
      if (result.leveledUp) {
        console.log(`üéâ [GameificationService] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–æ–≤—ã—Å–∏–ª—Å—è –¥–æ —É—Ä–æ–≤–Ω—è ${result.newLevel}!`)
        this.eventBus.emit('gamification:level_up', {
          userId,
          previousLevel: result.previousLevel,
          newLevel: result.newLevel,
          totalPoints: result.user.totalPoints
        })
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      await this.checkAndAwardAchievements(userId)

      return result

    } catch (error) {
      console.error(`üéÆ [GameificationService] –û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ—á–∫–æ–≤:`, error)
      throw error
    }
  }

  // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –î–û–°–¢–ò–ñ–ï–ù–ò–Ø–ú–ò ===

  async checkAndAwardAchievements(userId) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const stats = await this.getUserStatsForAchievements(userId)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–æ–∂–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
      const newAchievements = await this.achievementRepository.checkUserAchievements(userId, stats)
      
      // –ù–∞–≥—Ä–∞–∂–¥–∞–µ–º –Ω–æ–≤—ã–º–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏
      for (const achievement of newAchievements) {
        await this.awardAchievement(userId, achievement.id)
      }

      return newAchievements

    } catch (error) {
      console.error(`üéÆ [GameificationService] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:`, error)
      return []
    }
  }

  async awardAchievement(userId, achievementId) {
    try {
      const userAchievement = await this.userRepository.awardAchievement(userId, achievementId)
      
      if (userAchievement) {
        console.log(`üèÜ [GameificationService] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: ${userAchievement.achievement.name}`)
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        this.eventBus.emit('gamification:achievement_earned', {
          userId,
          achievement: userAchievement.achievement,
          earnedAt: userAchievement.earnedAt
        })

        return userAchievement
      }

      return null

    } catch (error) {
      console.error(`üéÆ [GameificationService] –û—à–∏–±–∫–∞ –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º:`, error)
      throw error
    }
  }

  // === –ü–û–õ–£–ß–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò ===

  async getUserGamificationData(userId) {
    try {
      const [gamificationStats, achievements] = await Promise.all([
        this.userRepository.getGamificationStats(userId),
        this.achievementRepository.getUserProgress(userId)
      ])

      return {
        ...gamificationStats,
        achievements: achievements.unlocked,
        availableAchievements: achievements.locked,
        achievementProgress: {
          unlocked: achievements.totalUnlocked,
          total: achievements.totalAvailable,
          percentage: achievements.completionPercentage
        }
      }

    } catch (error) {
      console.error(`üéÆ [GameificationService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏:`, error)
      throw error
    }
  }

  async getUserStatsForAchievements(userId) {
    try {
      const [userStats, user] = await Promise.all([
        this.userRepository.getUserStats(userId),
        this.userRepository.findById(userId)
      ])

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–æ–≤
      const analysisCount = await this.getAnalysisCount(userId)

      return {
        ...userStats,
        analysisCount,
        level: user.level,
        experience: user.experience,
        totalPoints: user.totalPoints
      }

    } catch (error) {
      console.error(`üéÆ [GameificationService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:`, error)
      return {}
    }
  }

  async getAnalysisCount(userId) {
    try {
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–æ–≤ —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { prisma } = await import('../../infrastructure/database/client.js')
      
      return await prisma.analysis.count({
        where: {
          session: {
            userId: userId
          }
        }
      })
    } catch (error) {
      console.error(`üéÆ [GameificationService] –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∞–Ω–∞–ª–∏–∑–æ–≤:`, error)
      return 0
    }
  }

  // === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===

  async initializeGameification() {
    try {
      console.log('üéÆ [GameificationService] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏...')
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      await this.achievementRepository.initializeDefaultAchievements()
      
      console.log('üéÆ [GameificationService] –°–∏—Å—Ç–µ–º–∞ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞')

    } catch (error) {
      console.error('üéÆ [GameificationService] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error)
      throw error
    }
  }

  // === –ú–ï–¢–û–î–´-–•–ï–õ–ü–ï–†–´ ===

  async getLeaderboard(limit = 10) {
    try {
      const { prisma } = await import('../../infrastructure/database/client.js')
      
      return await prisma.user.findMany({
        select: {
          id: true,
          name: true,
          level: true,
          totalPoints: true,
          experience: true
        },
        orderBy: [
          { level: 'desc' },
          { totalPoints: 'desc' }
        ],
        take: limit
      })

    } catch (error) {
      console.error(`üéÆ [GameificationService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞:`, error)
      return []
    }
  }

  calculateLevelProgress(experience) {
    const currentLevel = Math.floor(experience / 1000) + 1
    const currentLevelExp = (currentLevel - 1) * 1000
    const nextLevelExp = currentLevel * 1000
    const progressToNextLevel = experience - currentLevelExp
    const progressPercentage = (progressToNextLevel / 1000) * 100

    return {
      currentLevel,
      progressToNextLevel,
      expNeededForNextLevel: nextLevelExp - experience,
      progressPercentage: Math.min(progressPercentage, 100)
    }
  }
}